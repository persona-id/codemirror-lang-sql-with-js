@precedence { dot }

@top Script {
  Statement { element* Semi }*
  Statement { element+ }?
}

@skip { whitespace | LineComment | BlockComment }

@tokens {
  Directive { DirectiveStart DirectiveContent* DirectiveEnd }

  DirectiveStart[closedBy="DirectiveEnd"] { "{{" }

  DirectiveEnd[openedBy="DirectiveStart"] { "}}" }

  DirectiveContent {
    unicodeChar |
    "}" ![}] |
    "\\}}"
  }

  unicodeChar { $[\u0000-\u007C] | $[\u007E-\u06FF] }
}

element {
  String |
  Number |
  Bool |
  Null |
  Identifier |
  QuotedIdentifier |
  Bits |
  Bytes |
  Builtin |
  SpecialVar |
  CompositeIdentifier {
     Dot? (QuotedIdentifier | Identifier | SpecialVar | Directive) (!dot Dot (QuotedIdentifier | Identifier | SpecialVar | Directive))+
  } |
  Keyword |
  Type |
  Operator |
  Punctuation |
  Parens { ParenL element* ParenR } |
  Braces { BraceL element* BraceR } |
  Brackets { BracketL element* BracketR } |
  Directive
}

@external tokens tokens from "./tokens" {
  whitespace
  LineComment
  BlockComment
  String
  Number
  Bool
  Null
  ParenL[@name="("]
  ParenR[@name=")"]
  BraceL[@name="{"]
  BraceR[@name="}"]
  BracketL[@name="["]
  BracketR[@name="]"]
  Semi[@name=";"]
  Dot[@name="."]
  Operator
  Punctuation
  SpecialVar
  Identifier
  QuotedIdentifier
  Keyword
  Type
  Bits
  Bytes
  Builtin
}

@detectDelim